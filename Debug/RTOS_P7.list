
RTOS_P7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003490  08003490  00004490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003558  08003558  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003558  08003558  00004558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003560  08003560  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003560  08003560  00004560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003564  08003564  00004564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003568  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  20000064  080035cc  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004210  080035cc  00005210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2d1  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270b  00000000  00000000  00014365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00016a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b01  00000000  00000000  000178c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172af  00000000  00000000  000183c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000faca  00000000  00000000  0002f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000932a4  00000000  00000000  0003f142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d23e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000d242c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000d61ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003478 	.word	0x08003478

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08003478 	.word	0x08003478

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000080 	.word	0x20000080
 8000500:	20000120 	.word	0x20000120

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b09c      	sub	sp, #112	@ 0x70
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fa89 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f861 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8bf 	bl	8000694 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000516:	4b27      	ldr	r3, [pc, #156]	@ (80005b4 <main+0xb0>)
 8000518:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800052a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fc5a 	bl	8001dea <osThreadCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a1f      	ldr	r2, [pc, #124]	@ (80005b8 <main+0xb4>)
 800053a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LedRedTaks */
  osThreadDef(LedRedTaks, red_led, osPriorityNormal, 0, 128);
 800053c:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <main+0xb8>)
 800053e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedRedTaksHandle = osThreadCreate(osThread(LedRedTaks), NULL);
 8000550:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fc47 	bl	8001dea <osThreadCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a18      	ldr	r2, [pc, #96]	@ (80005c0 <main+0xbc>)
 8000560:	6013      	str	r3, [r2, #0]

  /* definition and creation of GreenLedTask */
  osThreadDef(GreenLedTask, green_led, osPriorityNormal, 0, 128);
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <main+0xc0>)
 8000564:	f107 041c 	add.w	r4, r7, #28
 8000568:	461d      	mov	r5, r3
 800056a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLedTaskHandle = osThreadCreate(osThread(GreenLedTask), NULL);
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fc34 	bl	8001dea <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a10      	ldr	r2, [pc, #64]	@ (80005c8 <main+0xc4>)
 8000586:	6013      	str	r3, [r2, #0]

  /* definition and creation of YellowLedTask */
  osThreadDef(YellowLedTask, yellow_led, osPriorityIdle, 0, 128);
 8000588:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <main+0xc8>)
 800058a:	463c      	mov	r4, r7
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YellowLedTaskHandle = osThreadCreate(osThread(YellowLedTask), NULL);
 800059a:	463b      	mov	r3, r7
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fc23 	bl	8001dea <osThreadCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <main+0xcc>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005aa:	f001 fc17 	bl	8001ddc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	bf00      	nop
 80005b0:	e7fd      	b.n	80005ae <main+0xaa>
 80005b2:	bf00      	nop
 80005b4:	0800349c 	.word	0x0800349c
 80005b8:	20000320 	.word	0x20000320
 80005bc:	080034c4 	.word	0x080034c4
 80005c0:	20000324 	.word	0x20000324
 80005c4:	080034f0 	.word	0x080034f0
 80005c8:	20000328 	.word	0x20000328
 80005cc:	0800351c 	.word	0x0800351c
 80005d0:	2000032c 	.word	0x2000032c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fe6e 	bl	80032c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b23      	ldr	r3, [pc, #140]	@ (800068c <SystemClock_Config+0xb8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a22      	ldr	r2, [pc, #136]	@ (800068c <SystemClock_Config+0xb8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b20      	ldr	r3, [pc, #128]	@ (800068c <SystemClock_Config+0xb8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <SystemClock_Config+0xbc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000620:	4a1b      	ldr	r2, [pc, #108]	@ (8000690 <SystemClock_Config+0xbc>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <SystemClock_Config+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fcc5 	bl	8000fd8 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000654:	f000 f8d4 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff28 	bl	80014c8 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800067e:	f000 f8bf 	bl	8000800 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	@ 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_GPIO_Init+0x5c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b0:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <MX_GPIO_Init+0x5c>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_GPIO_Init+0x5c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	210f      	movs	r1, #15
 80006c8:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <MX_GPIO_Init+0x60>)
 80006ca:	f000 fc51 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80006ce:	230f      	movs	r3, #15
 80006d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_GPIO_Init+0x60>)
 80006e4:	f000 fac0 	bl	8000c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000

080006f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f001 fbbe 	bl	8001e82 <osDelay>
 8000706:	e7fb      	b.n	8000700 <StartDefaultTask+0x8>

08000708 <red_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_red_led */
void red_led(void const * argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN red_led */
  /* Infinite loop */
	for(;;)
		    {
		        // Menyalakan LED Merah
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2102      	movs	r1, #2
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <red_led+0x34>)
 8000716:	f000 fc2b 	bl	8000f70 <HAL_GPIO_WritePin>

		        // Mengakses data bersama dengan critical section
		        taskENTER_CRITICAL();
 800071a:	f002 fb05 	bl	8002d28 <vPortEnterCritical>
		        accessSharedData();
 800071e:	f000 f83b 	bl	8000798 <accessSharedData>
		        taskEXIT_CRITICAL();
 8000722:	f002 fb33 	bl	8002d8c <vPortExitCritical>

		        // Mematikan LED Merah
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2102      	movs	r1, #2
 800072a:	4804      	ldr	r0, [pc, #16]	@ (800073c <red_led+0x34>)
 800072c:	f000 fc20 	bl	8000f70 <HAL_GPIO_WritePin>

		        // Menunda 550 ms
		        osDelay(550);
 8000730:	f240 2026 	movw	r0, #550	@ 0x226
 8000734:	f001 fba5 	bl	8001e82 <osDelay>
		    {
 8000738:	bf00      	nop
 800073a:	e7e9      	b.n	8000710 <red_led+0x8>
 800073c:	40020000 	.word	0x40020000

08000740 <green_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_green_led */
void green_led(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN green_led */
  /* Infinite loop */
	for(;;)
		  {
		    // Menyalakan LED Hijau
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2101      	movs	r1, #1
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <green_led+0x34>)
 800074e:	f000 fc0f 	bl	8000f70 <HAL_GPIO_WritePin>

		    // Mengakses data bersama dengan critical section
		    taskENTER_CRITICAL();
 8000752:	f002 fae9 	bl	8002d28 <vPortEnterCritical>
		    accessSharedData();
 8000756:	f000 f81f 	bl	8000798 <accessSharedData>
		    taskEXIT_CRITICAL();
 800075a:	f002 fb17 	bl	8002d8c <vPortExitCritical>

		    // Mematikan LED Hijau
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2101      	movs	r1, #1
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <green_led+0x34>)
 8000764:	f000 fc04 	bl	8000f70 <HAL_GPIO_WritePin>

		    // Menunda 200 ms
		    osDelay(200);
 8000768:	20c8      	movs	r0, #200	@ 0xc8
 800076a:	f001 fb8a 	bl	8001e82 <osDelay>
		  {
 800076e:	bf00      	nop
 8000770:	e7ea      	b.n	8000748 <green_led+0x8>
 8000772:	bf00      	nop
 8000774:	40020000 	.word	0x40020000

08000778 <yellow_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_yellow_led */
void yellow_led(void const * argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN yellow_led */
  /* Infinite loop */
	 for(;;)
		  {
		    // Toggle LED Oranye setiap 50 ms
		    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000780:	2104      	movs	r1, #4
 8000782:	4804      	ldr	r0, [pc, #16]	@ (8000794 <yellow_led+0x1c>)
 8000784:	f000 fc0d 	bl	8000fa2 <HAL_GPIO_TogglePin>

		    // Menunda 50 ms
		    osDelay(50);
 8000788:	2032      	movs	r0, #50	@ 0x32
 800078a:	f001 fb7a 	bl	8001e82 <osDelay>
		    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800078e:	bf00      	nop
 8000790:	e7f6      	b.n	8000780 <yellow_led+0x8>
 8000792:	bf00      	nop
 8000794:	40020000 	.word	0x40020000

08000798 <accessSharedData>:
		  }
  /* USER CODE END yellow_led */
}

void accessSharedData(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  if (startFlag == 1)
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <accessSharedData+0x3c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d103      	bne.n	80007ae <accessSharedData+0x16>
  {
    // Set flag ke 0
    startFlag = 0;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <accessSharedData+0x3c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	e004      	b.n	80007b8 <accessSharedData+0x20>
  }
  else
  {
    // Menyalakan LED Biru untuk menunjukkan konflik
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <accessSharedData+0x40>)
 80007b4:	f000 fbdc 	bl	8000f70 <HAL_GPIO_WritePin>
  }

  // Simulasi operasi baca/tulis selama 1000 ms
  osDelay(1000);
 80007b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007bc:	f001 fb61 	bl	8001e82 <osDelay>

  // Mengatur flag kembali ke 1
  startFlag = 1;
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <accessSharedData+0x3c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]

  // Mematikan LED Biru
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <accessSharedData+0x40>)
 80007cc:	f000 fbd0 	bl	8000f70 <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	40020000 	.word	0x40020000

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 f939 	bl	8000a64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40000800 	.word	0x40000800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a11      	ldr	r2, [pc, #68]	@ (8000860 <HAL_MspInit+0x54>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <HAL_MspInit+0x54>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 f9df 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	@ 0x38
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4b33      	ldr	r3, [pc, #204]	@ (8000948 <HAL_InitTick+0xe4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a32      	ldr	r2, [pc, #200]	@ (8000948 <HAL_InitTick+0xe4>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <HAL_InitTick+0xe4>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000890:	f107 0210 	add.w	r2, r7, #16
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 ffe0 	bl	8001860 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d103      	bne.n	80008b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008aa:	f000 ffc5 	bl	8001838 <HAL_RCC_GetPCLK1Freq>
 80008ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80008b0:	e004      	b.n	80008bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008b2:	f000 ffc1 	bl	8001838 <HAL_RCC_GetPCLK1Freq>
 80008b6:	4603      	mov	r3, r0
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008be:	4a23      	ldr	r2, [pc, #140]	@ (800094c <HAL_InitTick+0xe8>)
 80008c0:	fba2 2303 	umull	r2, r3, r2, r3
 80008c4:	0c9b      	lsrs	r3, r3, #18
 80008c6:	3b01      	subs	r3, #1
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <HAL_InitTick+0xec>)
 80008cc:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <HAL_InitTick+0xf0>)
 80008ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <HAL_InitTick+0xec>)
 80008d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000950 <HAL_InitTick+0xec>)
 80008da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008dc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_InitTick+0xec>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <HAL_InitTick+0xec>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <HAL_InitTick+0xec>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008f0:	4817      	ldr	r0, [pc, #92]	@ (8000950 <HAL_InitTick+0xec>)
 80008f2:	f000 ffe7 	bl	80018c4 <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11b      	bne.n	800093c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000904:	4812      	ldr	r0, [pc, #72]	@ (8000950 <HAL_InitTick+0xec>)
 8000906:	f001 f837 	bl	8001978 <HAL_TIM_Base_Start_IT>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000910:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000914:	2b00      	cmp	r3, #0
 8000916:	d111      	bne.n	800093c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000918:	201e      	movs	r0, #30
 800091a:	f000 f997 	bl	8000c4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d808      	bhi.n	8000936 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	201e      	movs	r0, #30
 800092a:	f000 f973 	bl	8000c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_InitTick+0xf4>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	e002      	b.n	800093c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800093c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000940:	4618      	mov	r0, r3
 8000942:	3738      	adds	r7, #56	@ 0x38
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	431bde83 	.word	0x431bde83
 8000950:	20000330 	.word	0x20000330
 8000954:	40000800 	.word	0x40000800
 8000958:	20000008 	.word	0x20000008

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <TIM4_IRQHandler+0x10>)
 800099a:	f001 f84f 	bl	8001a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000330 	.word	0x20000330

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009d0:	f7ff ffea 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 fcc1 	bl	8003380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd81 	bl	8000504 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a10:	08003568 	.word	0x08003568
  ldr r2, =_sbss
 8000a14:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a18:	20004210 	.word	0x20004210

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f8d8 	bl	8000bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f7ff ff08 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff feda 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_IncTick+0x24>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <HAL_IncTick+0x24>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000000c 	.word	0x2000000c
 8000a88:	20000378 	.word	0x20000378

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <HAL_GetTick+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000378 	.word	0x20000378

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	@ (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	@ (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	@ 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	@ 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff4c 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c26:	f7ff ff61 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	6978      	ldr	r0, [r7, #20]
 8000c32:	f7ff ffb1 	bl	8000b98 <NVIC_EncodePriority>
 8000c36:	4602      	mov	r2, r0
 8000c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff80 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff54 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e159      	b.n	8000f38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8148 	bne.w	8000f32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80a2 	beq.w	8000f32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b57      	ldr	r3, [pc, #348]	@ (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a56      	ldr	r2, [pc, #344]	@ (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b54      	ldr	r3, [pc, #336]	@ (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a52      	ldr	r2, [pc, #328]	@ (8000f54 <HAL_GPIO_Init+0x2ec>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a49      	ldr	r2, [pc, #292]	@ (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0x202>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a48      	ldr	r2, [pc, #288]	@ (8000f5c <HAL_GPIO_Init+0x2f4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x1fe>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a47      	ldr	r2, [pc, #284]	@ (8000f60 <HAL_GPIO_Init+0x2f8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x1fa>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a46      	ldr	r2, [pc, #280]	@ (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x1f6>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a45      	ldr	r2, [pc, #276]	@ (8000f68 <HAL_GPIO_Init+0x300>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x1f2>
 8000e56:	2304      	movs	r3, #4
 8000e58:	e008      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e7c:	4935      	ldr	r1, [pc, #212]	@ (8000f54 <HAL_GPIO_Init+0x2ec>)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eae:	4a2f      	ldr	r2, [pc, #188]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed8:	4a24      	ldr	r2, [pc, #144]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ede:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f02:	4a1a      	ldr	r2, [pc, #104]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	f67f aea2 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	041a      	lsls	r2, r3, #16
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e267      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d075      	beq.n	80010e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ff6:	4b88      	ldr	r3, [pc, #544]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d00c      	beq.n	800101c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001002:	4b85      	ldr	r3, [pc, #532]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800100a:	2b08      	cmp	r3, #8
 800100c:	d112      	bne.n	8001034 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100e:	4b82      	ldr	r3, [pc, #520]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800101a:	d10b      	bne.n	8001034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101c:	4b7e      	ldr	r3, [pc, #504]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d05b      	beq.n	80010e0 <HAL_RCC_OscConfig+0x108>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d157      	bne.n	80010e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e242      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800103c:	d106      	bne.n	800104c <HAL_RCC_OscConfig+0x74>
 800103e:	4b76      	ldr	r3, [pc, #472]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a75      	ldr	r2, [pc, #468]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e01d      	b.n	8001088 <HAL_RCC_OscConfig+0xb0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x98>
 8001056:	4b70      	ldr	r3, [pc, #448]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a6f      	ldr	r2, [pc, #444]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b6d      	ldr	r3, [pc, #436]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a6c      	ldr	r2, [pc, #432]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e00b      	b.n	8001088 <HAL_RCC_OscConfig+0xb0>
 8001070:	4b69      	ldr	r3, [pc, #420]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a68      	ldr	r2, [pc, #416]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b66      	ldr	r3, [pc, #408]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a65      	ldr	r2, [pc, #404]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcfc 	bl	8000a8c <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fcf8 	bl	8000a8c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	@ 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e207      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0xc0>
 80010b6:	e014      	b.n	80010e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fce8 	bl	8000a8c <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fce4 	bl	8000a8c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	@ 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1f3      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	4b51      	ldr	r3, [pc, #324]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0xe8>
 80010de:	e000      	b.n	80010e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d063      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fa:	4b47      	ldr	r3, [pc, #284]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001102:	2b08      	cmp	r3, #8
 8001104:	d11c      	bne.n	8001140 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001106:	4b44      	ldr	r3, [pc, #272]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d116      	bne.n	8001140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	4b41      	ldr	r3, [pc, #260]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_RCC_OscConfig+0x152>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e1c7      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4b3b      	ldr	r3, [pc, #236]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	e03a      	b.n	80011b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <HAL_RCC_OscConfig+0x244>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114e:	f7ff fc9d 	bl	8000a8c <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fc99 	bl	8000a8c <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e1a8      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4925      	ldr	r1, [pc, #148]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_RCC_OscConfig+0x244>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fc7c 	bl	8000a8c <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff fc78 	bl	8000a8c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e187      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d036      	beq.n	8001230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d016      	beq.n	80011f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_RCC_OscConfig+0x248>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d0:	f7ff fc5c 	bl	8000a8c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc58 	bl	8000a8c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e167      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80011ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x200>
 80011f6:	e01b      	b.n	8001230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_RCC_OscConfig+0x248>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fc45 	bl	8000a8c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	e00e      	b.n	8001224 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001206:	f7ff fc41 	bl	8000a8c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d907      	bls.n	8001224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e150      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
 8001218:	40023800 	.word	0x40023800
 800121c:	42470000 	.word	0x42470000
 8001220:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	4b88      	ldr	r3, [pc, #544]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1ea      	bne.n	8001206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8097 	beq.w	800136c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001242:	4b81      	ldr	r3, [pc, #516]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b7d      	ldr	r3, [pc, #500]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a7c      	ldr	r2, [pc, #496]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b7a      	ldr	r3, [pc, #488]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126e:	4b77      	ldr	r3, [pc, #476]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d118      	bne.n	80012ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127a:	4b74      	ldr	r3, [pc, #464]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a73      	ldr	r2, [pc, #460]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001286:	f7ff fc01 	bl	8000a8c <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128e:	f7ff fbfd 	bl	8000a8c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e10c      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	4b6a      	ldr	r3, [pc, #424]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2ea>
 80012b4:	4b64      	ldr	r3, [pc, #400]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b8:	4a63      	ldr	r2, [pc, #396]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6713      	str	r3, [r2, #112]	@ 0x70
 80012c0:	e01c      	b.n	80012fc <HAL_RCC_OscConfig+0x324>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x30c>
 80012ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80012d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012da:	4a5b      	ldr	r2, [pc, #364]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0x324>
 80012e4:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e8:	4a57      	ldr	r2, [pc, #348]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80012f0:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	4a54      	ldr	r2, [pc, #336]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012f6:	f023 0304 	bic.w	r3, r3, #4
 80012fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d015      	beq.n	8001330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fbc2 	bl	8000a8c <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff fbbe 	bl	8000a8c <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0cb      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001322:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0ee      	beq.n	800130c <HAL_RCC_OscConfig+0x334>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fbac 	bl	8000a8c <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff fba8 	bl	8000a8c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e0b5      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134e:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1ee      	bne.n	8001338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001360:	4b39      	ldr	r3, [pc, #228]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	4a38      	ldr	r2, [pc, #224]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800136a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80a1 	beq.w	80014b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001376:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b08      	cmp	r3, #8
 8001380:	d05c      	beq.n	800143c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d141      	bne.n	800140e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b31      	ldr	r3, [pc, #196]	@ (8001450 <HAL_RCC_OscConfig+0x478>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fb7c 	bl	8000a8c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff fb78 	bl	8000a8c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e087      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	085b      	lsrs	r3, r3, #1
 80013ce:	3b01      	subs	r3, #1
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	491b      	ldr	r1, [pc, #108]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_RCC_OscConfig+0x478>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fb51 	bl	8000a8c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff fb4d 	bl	8000a8c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e05c      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x416>
 800140c:	e054      	b.n	80014b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <HAL_RCC_OscConfig+0x478>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fb3a 	bl	8000a8c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fb36 	bl	8000a8c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e045      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x444>
 800143a:	e03d      	b.n	80014b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e038      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000
 8001450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_RCC_OscConfig+0x4ec>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d028      	beq.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d121      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d11a      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800148a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800148c:	4293      	cmp	r3, r2
 800148e:	d111      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	3b01      	subs	r3, #1
 800149e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0cc      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b68      	ldr	r3, [pc, #416]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d90c      	bls.n	8001504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b65      	ldr	r3, [pc, #404]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b63      	ldr	r3, [pc, #396]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0b8      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	4b59      	ldr	r3, [pc, #356]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001526:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001534:	4b53      	ldr	r3, [pc, #332]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a52      	ldr	r2, [pc, #328]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800153e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b50      	ldr	r3, [pc, #320]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	494d      	ldr	r1, [pc, #308]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d044      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d119      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e07f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d003      	beq.n	8001586 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	2b03      	cmp	r3, #3
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b3f      	ldr	r3, [pc, #252]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e06f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e067      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 0203 	bic.w	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4934      	ldr	r1, [pc, #208]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b8:	f7ff fa68 	bl	8000a8c <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7ff fa64 	bl	8000a8c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e04f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 020c 	and.w	r2, r3, #12
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1eb      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e8:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d20c      	bcs.n	8001610 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e032      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4916      	ldr	r1, [pc, #88]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	490e      	ldr	r1, [pc, #56]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800164e:	f000 f821 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 8001652:	4602      	mov	r2, r0
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	490a      	ldr	r1, [pc, #40]	@ (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	5ccb      	ldrb	r3, [r1, r3]
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f8f8 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00
 8001684:	40023800 	.word	0x40023800
 8001688:	08003540 	.word	0x08003540
 800168c:	20000004 	.word	0x20000004
 8001690:	20000008 	.word	0x20000008

08001694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001698:	b090      	sub	sp, #64	@ 0x40
 800169a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ac:	4b59      	ldr	r3, [pc, #356]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d00d      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x40>
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	f200 80a1 	bhi.w	8001800 <HAL_RCC_GetSysClockFreq+0x16c>
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x34>
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0x3a>
 80016c6:	e09b      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b53      	ldr	r3, [pc, #332]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x184>)
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016cc:	e09b      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ce:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_GetSysClockFreq+0x188>)
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016d2:	e098      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016de:	4b4d      	ldr	r3, [pc, #308]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d028      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	2200      	movs	r2, #0
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016fc:	2100      	movs	r1, #0
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_RCC_GetSysClockFreq+0x188>)
 8001700:	fb03 f201 	mul.w	r2, r3, r1
 8001704:	2300      	movs	r3, #0
 8001706:	fb00 f303 	mul.w	r3, r0, r3
 800170a:	4413      	add	r3, r2
 800170c:	4a43      	ldr	r2, [pc, #268]	@ (800181c <HAL_RCC_GetSysClockFreq+0x188>)
 800170e:	fba0 1202 	umull	r1, r2, r0, r2
 8001712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001714:	460a      	mov	r2, r1
 8001716:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171a:	4413      	add	r3, r2
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800171e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001720:	2200      	movs	r2, #0
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	61fa      	str	r2, [r7, #28]
 8001726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800172a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800172e:	f7fe fd57 	bl	80001e0 <__aeabi_uldivmod>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4613      	mov	r3, r2
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800173a:	e053      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173c:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	2200      	movs	r2, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	617a      	str	r2, [r7, #20]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800174e:	f04f 0b00 	mov.w	fp, #0
 8001752:	4652      	mov	r2, sl
 8001754:	465b      	mov	r3, fp
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	0159      	lsls	r1, r3, #5
 8001760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001764:	0150      	lsls	r0, r2, #5
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	ebb2 080a 	subs.w	r8, r2, sl
 800176e:	eb63 090b 	sbc.w	r9, r3, fp
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800177e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001782:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001786:	ebb2 0408 	subs.w	r4, r2, r8
 800178a:	eb63 0509 	sbc.w	r5, r3, r9
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	00eb      	lsls	r3, r5, #3
 8001798:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800179c:	00e2      	lsls	r2, r4, #3
 800179e:	4614      	mov	r4, r2
 80017a0:	461d      	mov	r5, r3
 80017a2:	eb14 030a 	adds.w	r3, r4, sl
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	eb45 030b 	adc.w	r3, r5, fp
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ba:	4629      	mov	r1, r5
 80017bc:	028b      	lsls	r3, r1, #10
 80017be:	4621      	mov	r1, r4
 80017c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c4:	4621      	mov	r1, r4
 80017c6:	028a      	lsls	r2, r1, #10
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ce:	2200      	movs	r2, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	60fa      	str	r2, [r7, #12]
 80017d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d8:	f7fe fd02 	bl	80001e0 <__aeabi_uldivmod>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4613      	mov	r3, r2
 80017e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	3301      	adds	r3, #1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80017f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017fe:	e002      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x184>)
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001808:	4618      	mov	r0, r3
 800180a:	3740      	adds	r7, #64	@ 0x40
 800180c:	46bd      	mov	sp, r7
 800180e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	00f42400 	.word	0x00f42400
 800181c:	017d7840 	.word	0x017d7840

08001820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_RCC_GetHCLKFreq+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800183c:	f7ff fff0 	bl	8001820 <HAL_RCC_GetHCLKFreq>
 8001840:	4602      	mov	r2, r0
 8001842:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	0a9b      	lsrs	r3, r3, #10
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	4903      	ldr	r1, [pc, #12]	@ (800185c <HAL_RCC_GetPCLK1Freq+0x24>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	08003550 	.word	0x08003550

08001860 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	220f      	movs	r2, #15
 800186e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_RCC_GetClockConfig+0x5c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_RCC_GetClockConfig+0x5c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_RCC_GetClockConfig+0x5c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_RCC_GetClockConfig+0x5c>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	08db      	lsrs	r3, r3, #3
 800189a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_RCC_GetClockConfig+0x60>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0207 	and.w	r2, r3, #7
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e041      	b.n	800195a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f839 	bl	8001962 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3304      	adds	r3, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f000 f9b2 	bl	8001c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d001      	beq.n	8001990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e044      	b.n	8001a1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001a28 <HAL_TIM_Base_Start_IT+0xb0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d018      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x6c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ba:	d013      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x6c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_TIM_Base_Start_IT+0xb4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00e      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x6c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_TIM_Base_Start_IT+0xb8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x6c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <HAL_TIM_Base_Start_IT+0xbc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d004      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x6c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <HAL_TIM_Base_Start_IT+0xc0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d111      	bne.n	8001a08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d010      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a06:	e007      	b.n	8001a18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40000400 	.word	0x40000400
 8001a30:	40000800 	.word	0x40000800
 8001a34:	40000c00 	.word	0x40000c00
 8001a38:	40014000 	.word	0x40014000

08001a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d020      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0202 	mvn.w	r2, #2
 8001a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f8d2 	bl	8001c30 <HAL_TIM_IC_CaptureCallback>
 8001a8c:	e005      	b.n	8001a9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8c4 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f8d5 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d020      	beq.n	8001aec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01b      	beq.n	8001aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0204 	mvn.w	r2, #4
 8001abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8ac 	bl	8001c30 <HAL_TIM_IC_CaptureCallback>
 8001ad8:	e005      	b.n	8001ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f89e 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8af 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d020      	beq.n	8001b38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01b      	beq.n	8001b38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0208 	mvn.w	r2, #8
 8001b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f886 	bl	8001c30 <HAL_TIM_IC_CaptureCallback>
 8001b24:	e005      	b.n	8001b32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f878 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f889 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d020      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01b      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0210 	mvn.w	r2, #16
 8001b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f860 	bl	8001c30 <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f852 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f863 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00c      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0201 	mvn.w	r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7fe fe1a 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00c      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8e6 	bl	8001d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00c      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f834 	bl	8001c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00c      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0220 	mvn.w	r2, #32
 8001c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8b8 	bl	8001d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d68 <TIM_Base_SetConfig+0xfc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00f      	beq.n	8001ca4 <TIM_Base_SetConfig+0x38>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8a:	d00b      	beq.n	8001ca4 <TIM_Base_SetConfig+0x38>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a37      	ldr	r2, [pc, #220]	@ (8001d6c <TIM_Base_SetConfig+0x100>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <TIM_Base_SetConfig+0x38>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a36      	ldr	r2, [pc, #216]	@ (8001d70 <TIM_Base_SetConfig+0x104>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d003      	beq.n	8001ca4 <TIM_Base_SetConfig+0x38>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a35      	ldr	r2, [pc, #212]	@ (8001d74 <TIM_Base_SetConfig+0x108>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d108      	bne.n	8001cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d68 <TIM_Base_SetConfig+0xfc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01b      	beq.n	8001cf6 <TIM_Base_SetConfig+0x8a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc4:	d017      	beq.n	8001cf6 <TIM_Base_SetConfig+0x8a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a28      	ldr	r2, [pc, #160]	@ (8001d6c <TIM_Base_SetConfig+0x100>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <TIM_Base_SetConfig+0x8a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a27      	ldr	r2, [pc, #156]	@ (8001d70 <TIM_Base_SetConfig+0x104>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00f      	beq.n	8001cf6 <TIM_Base_SetConfig+0x8a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <TIM_Base_SetConfig+0x108>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00b      	beq.n	8001cf6 <TIM_Base_SetConfig+0x8a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	@ (8001d78 <TIM_Base_SetConfig+0x10c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <TIM_Base_SetConfig+0x8a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a24      	ldr	r2, [pc, #144]	@ (8001d7c <TIM_Base_SetConfig+0x110>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <TIM_Base_SetConfig+0x8a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a23      	ldr	r2, [pc, #140]	@ (8001d80 <TIM_Base_SetConfig+0x114>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d108      	bne.n	8001d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <TIM_Base_SetConfig+0xfc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f023 0201 	bic.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40014000 	.word	0x40014000
 8001d7c:	40014400 	.word	0x40014400
 8001d80:	40014800 	.word	0x40014800

08001d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dbe:	2b84      	cmp	r3, #132	@ 0x84
 8001dc0:	d005      	beq.n	8001dce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001dc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3303      	adds	r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001de0:	f000 fafc 	bl	80023dc <vTaskStartScheduler>
  
  return osOK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}

08001dea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dec:	b089      	sub	sp, #36	@ 0x24
 8001dee:	af04      	add	r7, sp, #16
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <osThreadCreate+0x54>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01c      	beq.n	8001e3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685c      	ldr	r4, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691e      	ldr	r6, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ffc8 	bl	8001dac <makeFreeRtosPriority>
 8001e1c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e26:	9202      	str	r2, [sp, #8]
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	9100      	str	r1, [sp, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4632      	mov	r2, r6
 8001e30:	4629      	mov	r1, r5
 8001e32:	4620      	mov	r0, r4
 8001e34:	f000 f8ed 	bl	8002012 <xTaskCreateStatic>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e01c      	b.n	8001e78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685c      	ldr	r4, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e4a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffaa 	bl	8001dac <makeFreeRtosPriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	4632      	mov	r2, r6
 8001e66:	4629      	mov	r1, r5
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f000 f932 	bl	80020d2 <xTaskCreate>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d001      	beq.n	8001e78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e000      	b.n	8001e7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e78:	68fb      	ldr	r3, [r7, #12]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <osDelay+0x16>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	e000      	b.n	8001e9a <osDelay+0x18>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fa68 	bl	8002370 <vTaskDelay>
  
  return osOK;
 8001ea0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f103 0208 	add.w	r2, r3, #8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f103 0208 	add.w	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 0208 	add.w	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	601a      	str	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f62:	d103      	bne.n	8001f6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e00c      	b.n	8001f86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e002      	b.n	8001f7a <vListInsert+0x2e>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d2f6      	bcs.n	8001f74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6892      	ldr	r2, [r2, #8]
 8001fd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6852      	ldr	r2, [r2, #4]
 8001fde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d103      	bne.n	8001ff2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002012:	b580      	push	{r7, lr}
 8002014:	b08e      	sub	sp, #56	@ 0x38
 8002016:	af04      	add	r7, sp, #16
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	e7fd      	b.n	800203a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800203e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	61fb      	str	r3, [r7, #28]
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800205c:	23a0      	movs	r3, #160	@ 0xa0
 800205e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2ba0      	cmp	r3, #160	@ 0xa0
 8002064:	d00b      	beq.n	800207e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	61bb      	str	r3, [r7, #24]
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	e7fd      	b.n	800207a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800207e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01e      	beq.n	80020c4 <xTaskCreateStatic+0xb2>
 8002086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800208c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002094:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	2202      	movs	r2, #2
 800209a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800209e:	2300      	movs	r3, #0
 80020a0:	9303      	str	r3, [sp, #12]
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f850 	bl	800215c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020be:	f000 f8ed 	bl	800229c <prvAddNewTaskToReadyList>
 80020c2:	e001      	b.n	80020c8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80020c8:	697b      	ldr	r3, [r7, #20]
	}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3728      	adds	r7, #40	@ 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b08c      	sub	sp, #48	@ 0x30
 80020d6:	af04      	add	r7, sp, #16
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fefe 	bl	8002ee8 <pvPortMalloc>
 80020ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00e      	beq.n	8002112 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020f4:	20a0      	movs	r0, #160	@ 0xa0
 80020f6:	f000 fef7 	bl	8002ee8 <pvPortMalloc>
 80020fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
 8002108:	e005      	b.n	8002116 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f000 ffba 	bl	8003084 <vPortFree>
 8002110:	e001      	b.n	8002116 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d017      	beq.n	800214c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002124:	88fa      	ldrh	r2, [r7, #6]
 8002126:	2300      	movs	r3, #0
 8002128:	9303      	str	r3, [sp, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f80e 	bl	800215c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002140:	69f8      	ldr	r0, [r7, #28]
 8002142:	f000 f8ab 	bl	800229c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e002      	b.n	8002152 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002152:	69bb      	ldr	r3, [r7, #24]
	}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800216a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002174:	3b01      	subs	r3, #1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f023 0307 	bic.w	r3, r3, #7
 8002182:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800218e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	617b      	str	r3, [r7, #20]
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	e7fd      	b.n	80021a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01f      	beq.n	80021ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	e012      	b.n	80021d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	7819      	ldrb	r1, [r3, #0]
 80021ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4413      	add	r3, r2
 80021c0:	3334      	adds	r3, #52	@ 0x34
 80021c2:	460a      	mov	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d9e9      	bls.n	80021b2 <prvInitialiseNewTask+0x56>
 80021de:	e000      	b.n	80021e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80021e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021ea:	e003      	b.n	80021f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d901      	bls.n	80021fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021fa:	2306      	movs	r3, #6
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800220a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220c:	2200      	movs	r2, #0
 800220e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002212:	3304      	adds	r3, #4
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe68 	bl	8001eea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221c:	3318      	adds	r3, #24
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fe63 	bl	8001eea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002228:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800222a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222c:	f1c3 0207 	rsb	r2, r3, #7
 8002230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002232:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	2200      	movs	r2, #0
 800223e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	2200      	movs	r2, #0
 8002246:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224c:	334c      	adds	r3, #76	@ 0x4c
 800224e:	224c      	movs	r2, #76	@ 0x4c
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f836 	bl	80032c4 <memset>
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	4a0d      	ldr	r2, [pc, #52]	@ (8002290 <prvInitialiseNewTask+0x134>)
 800225c:	651a      	str	r2, [r3, #80]	@ 0x50
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <prvInitialiseNewTask+0x138>)
 8002262:	655a      	str	r2, [r3, #84]	@ 0x54
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	4a0c      	ldr	r2, [pc, #48]	@ (8002298 <prvInitialiseNewTask+0x13c>)
 8002268:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	68f9      	ldr	r1, [r7, #12]
 800226e:	69b8      	ldr	r0, [r7, #24]
 8002270:	f000 fc2a 	bl	8002ac8 <pxPortInitialiseStack>
 8002274:	4602      	mov	r2, r0
 8002276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002278:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800227a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002286:	bf00      	nop
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200040d0 	.word	0x200040d0
 8002294:	20004138 	.word	0x20004138
 8002298:	200041a0 	.word	0x200041a0

0800229c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022a4:	f000 fd40 	bl	8002d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <prvAddNewTaskToReadyList+0xb8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a29      	ldr	r2, [pc, #164]	@ (8002354 <prvAddNewTaskToReadyList+0xb8>)
 80022b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022b2:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <prvAddNewTaskToReadyList+0xbc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022ba:	4a27      	ldr	r2, [pc, #156]	@ (8002358 <prvAddNewTaskToReadyList+0xbc>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <prvAddNewTaskToReadyList+0xb8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d110      	bne.n	80022ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022c8:	f000 fad4 	bl	8002874 <prvInitialiseTaskLists>
 80022cc:	e00d      	b.n	80022ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <prvAddNewTaskToReadyList+0xc0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <prvAddNewTaskToReadyList+0xbc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d802      	bhi.n	80022ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002358 <prvAddNewTaskToReadyList+0xbc>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <prvAddNewTaskToReadyList+0xc4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <prvAddNewTaskToReadyList+0xc4>)
 80022f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	2201      	movs	r2, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <prvAddNewTaskToReadyList+0xc8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4313      	orrs	r3, r2
 8002302:	4a18      	ldr	r2, [pc, #96]	@ (8002364 <prvAddNewTaskToReadyList+0xc8>)
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4a15      	ldr	r2, [pc, #84]	@ (8002368 <prvAddNewTaskToReadyList+0xcc>)
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f7ff fdf1 	bl	8001f04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002322:	f000 fd33 	bl	8002d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <prvAddNewTaskToReadyList+0xc0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00e      	beq.n	800234c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <prvAddNewTaskToReadyList+0xbc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <prvAddNewTaskToReadyList+0xd0>)
 800233e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000047c 	.word	0x2000047c
 8002358:	2000037c 	.word	0x2000037c
 800235c:	20000488 	.word	0x20000488
 8002360:	20000498 	.word	0x20000498
 8002364:	20000484 	.word	0x20000484
 8002368:	20000380 	.word	0x20000380
 800236c:	e000ed04 	.word	0xe000ed04

08002370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d018      	beq.n	80023b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002382:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <vTaskDelay+0x64>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <vTaskDelay+0x32>
	__asm volatile
 800238a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	60bb      	str	r3, [r7, #8]
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	e7fd      	b.n	800239e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80023a2:	f000 f885 	bl	80024b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023a6:	2100      	movs	r1, #0
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fb27 	bl	80029fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023ae:	f000 f88d 	bl	80024cc <xTaskResumeAll>
 80023b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80023ba:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <vTaskDelay+0x68>)
 80023bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200004a4 	.word	0x200004a4
 80023d8:	e000ed04 	.word	0xe000ed04

080023dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	@ 0x28
 80023e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80023ea:	463a      	mov	r2, r7
 80023ec:	1d39      	adds	r1, r7, #4
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f86c 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	9202      	str	r2, [sp, #8]
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	460a      	mov	r2, r1
 800240a:	4921      	ldr	r1, [pc, #132]	@ (8002490 <vTaskStartScheduler+0xb4>)
 800240c:	4821      	ldr	r0, [pc, #132]	@ (8002494 <vTaskStartScheduler+0xb8>)
 800240e:	f7ff fe00 	bl	8002012 <xTaskCreateStatic>
 8002412:	4603      	mov	r3, r0
 8002414:	4a20      	ldr	r2, [pc, #128]	@ (8002498 <vTaskStartScheduler+0xbc>)
 8002416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002418:	4b1f      	ldr	r3, [pc, #124]	@ (8002498 <vTaskStartScheduler+0xbc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002420:	2301      	movs	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e001      	b.n	800242a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d11b      	bne.n	8002468 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	613b      	str	r3, [r7, #16]
}
 8002442:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002444:	4b15      	ldr	r3, [pc, #84]	@ (800249c <vTaskStartScheduler+0xc0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	334c      	adds	r3, #76	@ 0x4c
 800244a:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <vTaskStartScheduler+0xc4>)
 800244c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <vTaskStartScheduler+0xc8>)
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <vTaskStartScheduler+0xcc>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <vTaskStartScheduler+0xd0>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002462:	f000 fbbd 	bl	8002be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002466:	e00f      	b.n	8002488 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d10b      	bne.n	8002488 <vTaskStartScheduler+0xac>
	__asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	60fb      	str	r3, [r7, #12]
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <vTaskStartScheduler+0xa8>
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	08003538 	.word	0x08003538
 8002494:	08002845 	.word	0x08002845
 8002498:	200004a0 	.word	0x200004a0
 800249c:	2000037c 	.word	0x2000037c
 80024a0:	20000014 	.word	0x20000014
 80024a4:	2000049c 	.word	0x2000049c
 80024a8:	20000488 	.word	0x20000488
 80024ac:	20000480 	.word	0x20000480

080024b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <vTaskSuspendAll+0x18>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4a03      	ldr	r2, [pc, #12]	@ (80024c8 <vTaskSuspendAll+0x18>)
 80024bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	200004a4 	.word	0x200004a4

080024cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024da:	4b42      	ldr	r3, [pc, #264]	@ (80025e4 <xTaskResumeAll+0x118>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10b      	bne.n	80024fa <xTaskResumeAll+0x2e>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	603b      	str	r3, [r7, #0]
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	e7fd      	b.n	80024f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024fa:	f000 fc15 	bl	8002d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024fe:	4b39      	ldr	r3, [pc, #228]	@ (80025e4 <xTaskResumeAll+0x118>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3b01      	subs	r3, #1
 8002504:	4a37      	ldr	r2, [pc, #220]	@ (80025e4 <xTaskResumeAll+0x118>)
 8002506:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002508:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <xTaskResumeAll+0x118>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d161      	bne.n	80025d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002510:	4b35      	ldr	r3, [pc, #212]	@ (80025e8 <xTaskResumeAll+0x11c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05d      	beq.n	80025d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002518:	e02e      	b.n	8002578 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800251a:	4b34      	ldr	r3, [pc, #208]	@ (80025ec <xTaskResumeAll+0x120>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3318      	adds	r3, #24
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fd49 	bl	8001fbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3304      	adds	r3, #4
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd44 	bl	8001fbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	2201      	movs	r2, #1
 800253c:	409a      	lsls	r2, r3
 800253e:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <xTaskResumeAll+0x124>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	4a2a      	ldr	r2, [pc, #168]	@ (80025f0 <xTaskResumeAll+0x124>)
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4a27      	ldr	r2, [pc, #156]	@ (80025f4 <xTaskResumeAll+0x128>)
 8002556:	441a      	add	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f7ff fcd0 	bl	8001f04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002568:	4b23      	ldr	r3, [pc, #140]	@ (80025f8 <xTaskResumeAll+0x12c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002572:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <xTaskResumeAll+0x130>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002578:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <xTaskResumeAll+0x120>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1cc      	bne.n	800251a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002586:	f000 fa19 	bl	80029bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800258a:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <xTaskResumeAll+0x134>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d010      	beq.n	80025b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002596:	f000 f837 	bl	8002608 <xTaskIncrementTick>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80025a0:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <xTaskResumeAll+0x130>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f1      	bne.n	8002596 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80025b2:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <xTaskResumeAll+0x134>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025b8:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <xTaskResumeAll+0x130>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025c0:	2301      	movs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <xTaskResumeAll+0x138>)
 80025c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025d4:	f000 fbda 	bl	8002d8c <vPortExitCritical>

	return xAlreadyYielded;
 80025d8:	68bb      	ldr	r3, [r7, #8]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200004a4 	.word	0x200004a4
 80025e8:	2000047c 	.word	0x2000047c
 80025ec:	2000043c 	.word	0x2000043c
 80025f0:	20000484 	.word	0x20000484
 80025f4:	20000380 	.word	0x20000380
 80025f8:	2000037c 	.word	0x2000037c
 80025fc:	20000490 	.word	0x20000490
 8002600:	2000048c 	.word	0x2000048c
 8002604:	e000ed04 	.word	0xe000ed04

08002608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002612:	4b4f      	ldr	r3, [pc, #316]	@ (8002750 <xTaskIncrementTick+0x148>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 808f 	bne.w	800273a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800261c:	4b4d      	ldr	r3, [pc, #308]	@ (8002754 <xTaskIncrementTick+0x14c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002624:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <xTaskIncrementTick+0x14c>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d121      	bne.n	8002674 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002630:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <xTaskIncrementTick+0x4a>
	__asm volatile
 800263a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	603b      	str	r3, [r7, #0]
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	e7fd      	b.n	800264e <xTaskIncrementTick+0x46>
 8002652:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	4b40      	ldr	r3, [pc, #256]	@ (800275c <xTaskIncrementTick+0x154>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3e      	ldr	r2, [pc, #248]	@ (8002758 <xTaskIncrementTick+0x150>)
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4a3e      	ldr	r2, [pc, #248]	@ (800275c <xTaskIncrementTick+0x154>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b3e      	ldr	r3, [pc, #248]	@ (8002760 <xTaskIncrementTick+0x158>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a3c      	ldr	r2, [pc, #240]	@ (8002760 <xTaskIncrementTick+0x158>)
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	f000 f9a4 	bl	80029bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002674:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <xTaskIncrementTick+0x15c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	d348      	bcc.n	8002710 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800267e:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d104      	bne.n	8002692 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002688:	4b36      	ldr	r3, [pc, #216]	@ (8002764 <xTaskIncrementTick+0x15c>)
 800268a:	f04f 32ff 	mov.w	r2, #4294967295
 800268e:	601a      	str	r2, [r3, #0]
					break;
 8002690:	e03e      	b.n	8002710 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d203      	bcs.n	80026b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002764 <xTaskIncrementTick+0x15c>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026b0:	e02e      	b.n	8002710 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fc81 	bl	8001fbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3318      	adds	r3, #24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fc78 	bl	8001fbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <xTaskIncrementTick+0x160>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	4a22      	ldr	r2, [pc, #136]	@ (8002768 <xTaskIncrementTick+0x160>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4a1f      	ldr	r2, [pc, #124]	@ (800276c <xTaskIncrementTick+0x164>)
 80026ee:	441a      	add	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f7ff fc04 	bl	8001f04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <xTaskIncrementTick+0x168>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	429a      	cmp	r2, r3
 8002708:	d3b9      	bcc.n	800267e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800270a:	2301      	movs	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800270e:	e7b6      	b.n	800267e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <xTaskIncrementTick+0x168>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002716:	4915      	ldr	r1, [pc, #84]	@ (800276c <xTaskIncrementTick+0x164>)
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d901      	bls.n	800272c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <xTaskIncrementTick+0x16c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e004      	b.n	8002744 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800273a:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <xTaskIncrementTick+0x170>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <xTaskIncrementTick+0x170>)
 8002742:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002744:	697b      	ldr	r3, [r7, #20]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200004a4 	.word	0x200004a4
 8002754:	20000480 	.word	0x20000480
 8002758:	20000434 	.word	0x20000434
 800275c:	20000438 	.word	0x20000438
 8002760:	20000494 	.word	0x20000494
 8002764:	2000049c 	.word	0x2000049c
 8002768:	20000484 	.word	0x20000484
 800276c:	20000380 	.word	0x20000380
 8002770:	2000037c 	.word	0x2000037c
 8002774:	20000490 	.word	0x20000490
 8002778:	2000048c 	.word	0x2000048c

0800277c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002782:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <vTaskSwitchContext+0xb0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <vTaskSwitchContext+0xb4>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002790:	e045      	b.n	800281e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002792:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <vTaskSwitchContext+0xb4>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002798:	4b26      	ldr	r3, [pc, #152]	@ (8002834 <vTaskSwitchContext+0xb8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	f1c3 031f 	rsb	r3, r3, #31
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	4922      	ldr	r1, [pc, #136]	@ (8002838 <vTaskSwitchContext+0xbc>)
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <vTaskSwitchContext+0x5e>
	__asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	607b      	str	r3, [r7, #4]
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	e7fd      	b.n	80027d6 <vTaskSwitchContext+0x5a>
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <vTaskSwitchContext+0xbc>)
 80027e6:	4413      	add	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	3308      	adds	r3, #8
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d104      	bne.n	800280a <vTaskSwitchContext+0x8e>
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <vTaskSwitchContext+0xc0>)
 8002812:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002814:	4b09      	ldr	r3, [pc, #36]	@ (800283c <vTaskSwitchContext+0xc0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	334c      	adds	r3, #76	@ 0x4c
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <vTaskSwitchContext+0xc4>)
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200004a4 	.word	0x200004a4
 8002830:	20000490 	.word	0x20000490
 8002834:	20000484 	.word	0x20000484
 8002838:	20000380 	.word	0x20000380
 800283c:	2000037c 	.word	0x2000037c
 8002840:	20000014 	.word	0x20000014

08002844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800284c:	f000 f852 	bl	80028f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <prvIdleTask+0x28>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d9f9      	bls.n	800284c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <prvIdleTask+0x2c>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002868:	e7f0      	b.n	800284c <prvIdleTask+0x8>
 800286a:	bf00      	nop
 800286c:	20000380 	.word	0x20000380
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	e00c      	b.n	800289a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <prvInitialiseTaskLists+0x60>)
 800288c:	4413      	add	r3, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fb0b 	bl	8001eaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3301      	adds	r3, #1
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d9ef      	bls.n	8002880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80028a0:	480d      	ldr	r0, [pc, #52]	@ (80028d8 <prvInitialiseTaskLists+0x64>)
 80028a2:	f7ff fb02 	bl	8001eaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028a6:	480d      	ldr	r0, [pc, #52]	@ (80028dc <prvInitialiseTaskLists+0x68>)
 80028a8:	f7ff faff 	bl	8001eaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <prvInitialiseTaskLists+0x6c>)
 80028ae:	f7ff fafc 	bl	8001eaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028b2:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <prvInitialiseTaskLists+0x70>)
 80028b4:	f7ff faf9 	bl	8001eaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028b8:	480b      	ldr	r0, [pc, #44]	@ (80028e8 <prvInitialiseTaskLists+0x74>)
 80028ba:	f7ff faf6 	bl	8001eaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <prvInitialiseTaskLists+0x78>)
 80028c0:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <prvInitialiseTaskLists+0x64>)
 80028c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <prvInitialiseTaskLists+0x7c>)
 80028c6:	4a05      	ldr	r2, [pc, #20]	@ (80028dc <prvInitialiseTaskLists+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000380 	.word	0x20000380
 80028d8:	2000040c 	.word	0x2000040c
 80028dc:	20000420 	.word	0x20000420
 80028e0:	2000043c 	.word	0x2000043c
 80028e4:	20000450 	.word	0x20000450
 80028e8:	20000468 	.word	0x20000468
 80028ec:	20000434 	.word	0x20000434
 80028f0:	20000438 	.word	0x20000438

080028f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028fa:	e019      	b.n	8002930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80028fc:	f000 fa14 	bl	8002d28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002900:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <prvCheckTasksWaitingTermination+0x50>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fb56 	bl	8001fbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002912:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <prvCheckTasksWaitingTermination+0x54>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3b01      	subs	r3, #1
 8002918:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <prvCheckTasksWaitingTermination+0x54>)
 800291a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <prvCheckTasksWaitingTermination+0x58>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3b01      	subs	r3, #1
 8002922:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <prvCheckTasksWaitingTermination+0x58>)
 8002924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002926:	f000 fa31 	bl	8002d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f810 	bl	8002950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <prvCheckTasksWaitingTermination+0x58>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e1      	bne.n	80028fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000450 	.word	0x20000450
 8002948:	2000047c 	.word	0x2000047c
 800294c:	20000464 	.word	0x20000464

08002950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	334c      	adds	r3, #76	@ 0x4c
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fcb9 	bl	80032d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002968:	2b00      	cmp	r3, #0
 800296a:	d108      	bne.n	800297e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fb87 	bl	8003084 <vPortFree>
				vPortFree( pxTCB );
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fb84 	bl	8003084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800297c:	e019      	b.n	80029b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002984:	2b01      	cmp	r3, #1
 8002986:	d103      	bne.n	8002990 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fb7b 	bl	8003084 <vPortFree>
	}
 800298e:	e010      	b.n	80029b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002996:	2b02      	cmp	r3, #2
 8002998:	d00b      	beq.n	80029b2 <prvDeleteTCB+0x62>
	__asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	60fb      	str	r3, [r7, #12]
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	e7fd      	b.n	80029ae <prvDeleteTCB+0x5e>
	}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <prvResetNextTaskUnblockTime+0x38>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <prvResetNextTaskUnblockTime+0x3c>)
 80029ce:	f04f 32ff 	mov.w	r2, #4294967295
 80029d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029d4:	e008      	b.n	80029e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <prvResetNextTaskUnblockTime+0x38>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <prvResetNextTaskUnblockTime+0x3c>)
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	20000434 	.word	0x20000434
 80029f8:	2000049c 	.word	0x2000049c

080029fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a06:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a0c:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fad3 	bl	8001fbe <uxListRemove>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10b      	bne.n	8002a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a1e:	4b24      	ldr	r3, [pc, #144]	@ (8002ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	2201      	movs	r2, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4013      	ands	r3, r2
 8002a32:	4a20      	ldr	r2, [pc, #128]	@ (8002ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d10a      	bne.n	8002a54 <prvAddCurrentTaskToDelayedList+0x58>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a44:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	481a      	ldr	r0, [pc, #104]	@ (8002ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a4e:	f7ff fa59 	bl	8001f04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a52:	e026      	b.n	8002aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a5c:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d209      	bcs.n	8002a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7ff fa67 	bl	8001f4c <vListInsert>
}
 8002a7e:	e010      	b.n	8002aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f7ff fa5d 	bl	8001f4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a92:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d202      	bcs.n	8002aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002a9c:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6013      	str	r3, [r2, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000480 	.word	0x20000480
 8002ab0:	2000037c 	.word	0x2000037c
 8002ab4:	20000484 	.word	0x20000484
 8002ab8:	20000468 	.word	0x20000468
 8002abc:	20000438 	.word	0x20000438
 8002ac0:	20000434 	.word	0x20000434
 8002ac4:	2000049c 	.word	0x2000049c

08002ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3b04      	subs	r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3b04      	subs	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002af8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b2c <pxPortInitialiseStack+0x64>)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b14      	subs	r3, #20
 8002b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3b04      	subs	r3, #4
 8002b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f06f 0202 	mvn.w	r2, #2
 8002b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3b20      	subs	r3, #32
 8002b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	08002b31 	.word	0x08002b31

08002b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b3a:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <prvTaskExitError+0x58>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d00b      	beq.n	8002b5c <prvTaskExitError+0x2c>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	60fb      	str	r3, [r7, #12]
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <prvTaskExitError+0x28>
	__asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	60bb      	str	r3, [r7, #8]
}
 8002b6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b70:	bf00      	nop
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0fc      	beq.n	8002b72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	00000000 	.word	0x00000000

08002b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b90:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <pxCurrentTCBConst2>)
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	6808      	ldr	r0, [r1, #0]
 8002b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9a:	f380 8809 	msr	PSP, r0
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f380 8811 	msr	BASEPRI, r0
 8002baa:	4770      	bx	lr
 8002bac:	f3af 8000 	nop.w

08002bb0 <pxCurrentTCBConst2>:
 8002bb0:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop

08002bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002bb8:	4808      	ldr	r0, [pc, #32]	@ (8002bdc <prvPortStartFirstTask+0x24>)
 8002bba:	6800      	ldr	r0, [r0, #0]
 8002bbc:	6800      	ldr	r0, [r0, #0]
 8002bbe:	f380 8808 	msr	MSP, r0
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f380 8814 	msr	CONTROL, r0
 8002bca:	b662      	cpsie	i
 8002bcc:	b661      	cpsie	f
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	df00      	svc	0
 8002bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002bda:	bf00      	nop
 8002bdc:	e000ed08 	.word	0xe000ed08

08002be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002be6:	4b47      	ldr	r3, [pc, #284]	@ (8002d04 <xPortStartScheduler+0x124>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a47      	ldr	r2, [pc, #284]	@ (8002d08 <xPortStartScheduler+0x128>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10b      	bne.n	8002c08 <xPortStartScheduler+0x28>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	613b      	str	r3, [r7, #16]
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c08:	4b3e      	ldr	r3, [pc, #248]	@ (8002d04 <xPortStartScheduler+0x124>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d0c <xPortStartScheduler+0x12c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10b      	bne.n	8002c2a <xPortStartScheduler+0x4a>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	60fb      	str	r3, [r7, #12]
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c2a:	4b39      	ldr	r3, [pc, #228]	@ (8002d10 <xPortStartScheduler+0x130>)
 8002c2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	22ff      	movs	r2, #255	@ 0xff
 8002c3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b31      	ldr	r3, [pc, #196]	@ (8002d14 <xPortStartScheduler+0x134>)
 8002c50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c52:	4b31      	ldr	r3, [pc, #196]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c58:	e009      	b.n	8002c6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002c62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b80      	cmp	r3, #128	@ 0x80
 8002c78:	d0ef      	beq.n	8002c5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c7a:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d00b      	beq.n	8002c9e <xPortStartScheduler+0xbe>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	60bb      	str	r3, [r7, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002ca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cb0:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <xPortStartScheduler+0x138>)
 8002cb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cbc:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <xPortStartScheduler+0x13c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a16      	ldr	r2, [pc, #88]	@ (8002d1c <xPortStartScheduler+0x13c>)
 8002cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <xPortStartScheduler+0x13c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <xPortStartScheduler+0x13c>)
 8002cce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002cd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002cd4:	f000 f8da 	bl	8002e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <xPortStartScheduler+0x140>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002cde:	f000 f8f9 	bl	8002ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <xPortStartScheduler+0x144>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d24 <xPortStartScheduler+0x144>)
 8002ce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002cec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002cee:	f7ff ff63 	bl	8002bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002cf2:	f7ff fd43 	bl	800277c <vTaskSwitchContext>
	prvTaskExitError();
 8002cf6:	f7ff ff1b 	bl	8002b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	e000ed00 	.word	0xe000ed00
 8002d08:	410fc271 	.word	0x410fc271
 8002d0c:	410fc270 	.word	0x410fc270
 8002d10:	e000e400 	.word	0xe000e400
 8002d14:	200004a8 	.word	0x200004a8
 8002d18:	200004ac 	.word	0x200004ac
 8002d1c:	e000ed20 	.word	0xe000ed20
 8002d20:	20000010 	.word	0x20000010
 8002d24:	e000ef34 	.word	0xe000ef34

08002d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	607b      	str	r3, [r7, #4]
}
 8002d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <vPortEnterCritical+0x5c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a0e      	ldr	r2, [pc, #56]	@ (8002d84 <vPortEnterCritical+0x5c>)
 8002d4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <vPortEnterCritical+0x5c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d110      	bne.n	8002d76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <vPortEnterCritical+0x60>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <vPortEnterCritical+0x4e>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	603b      	str	r3, [r7, #0]
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	e7fd      	b.n	8002d72 <vPortEnterCritical+0x4a>
	}
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000010 	.word	0x20000010
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <vPortExitCritical+0x50>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <vPortExitCritical+0x26>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	607b      	str	r3, [r7, #4]
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	e7fd      	b.n	8002dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <vPortExitCritical+0x50>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	4a08      	ldr	r2, [pc, #32]	@ (8002ddc <vPortExitCritical+0x50>)
 8002dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002dbc:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <vPortExitCritical+0x50>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <vPortExitCritical+0x44>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	20000010 	.word	0x20000010

08002de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002de0:	f3ef 8009 	mrs	r0, PSP
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <pxCurrentTCBConst>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f01e 0f10 	tst.w	lr, #16
 8002df0:	bf08      	it	eq
 8002df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002e04:	f380 8811 	msr	BASEPRI, r0
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f7ff fcb4 	bl	800277c <vTaskSwitchContext>
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f380 8811 	msr	BASEPRI, r0
 8002e1c:	bc09      	pop	{r0, r3}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e26:	f01e 0f10 	tst.w	lr, #16
 8002e2a:	bf08      	it	eq
 8002e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e30:	f380 8809 	msr	PSP, r0
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst>:
 8002e40:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
}
 8002e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e62:	f7ff fbd1 	bl	8002608 <xTaskIncrementTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <SysTick_Handler+0x40>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f383 8811 	msr	BASEPRI, r3
}
 8002e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <vPortSetupTimerInterrupt+0x38>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <vPortSetupTimerInterrupt+0x3c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <vPortSetupTimerInterrupt+0x40>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	4a09      	ldr	r2, [pc, #36]	@ (8002ed0 <vPortSetupTimerInterrupt+0x44>)
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010
 8002ec4:	e000e018 	.word	0xe000e018
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	10624dd3 	.word	0x10624dd3
 8002ed0:	e000e014 	.word	0xe000e014

08002ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002ee4 <vPortEnableVFP+0x10>
 8002ed8:	6801      	ldr	r1, [r0, #0]
 8002eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002ede:	6001      	str	r1, [r0, #0]
 8002ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ee2:	bf00      	nop
 8002ee4:	e000ed88 	.word	0xe000ed88

08002ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	@ 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ef4:	f7ff fadc 	bl	80024b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800306c <pvPortMalloc+0x184>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f00:	f000 f924 	bl	800314c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f04:	4b5a      	ldr	r3, [pc, #360]	@ (8003070 <pvPortMalloc+0x188>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 8095 	bne.w	800303c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01e      	beq.n	8002f56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002f18:	2208      	movs	r2, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f023 0307 	bic.w	r3, r3, #7
 8002f30:	3308      	adds	r3, #8
 8002f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <pvPortMalloc+0x6e>
	__asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	617b      	str	r3, [r7, #20]
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	e7fd      	b.n	8002f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d06f      	beq.n	800303c <pvPortMalloc+0x154>
 8002f5c:	4b45      	ldr	r3, [pc, #276]	@ (8003074 <pvPortMalloc+0x18c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d86a      	bhi.n	800303c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f66:	4b44      	ldr	r3, [pc, #272]	@ (8003078 <pvPortMalloc+0x190>)
 8002f68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f6a:	4b43      	ldr	r3, [pc, #268]	@ (8003078 <pvPortMalloc+0x190>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f70:	e004      	b.n	8002f7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d903      	bls.n	8002f8e <pvPortMalloc+0xa6>
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f1      	bne.n	8002f72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f8e:	4b37      	ldr	r3, [pc, #220]	@ (800306c <pvPortMalloc+0x184>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d051      	beq.n	800303c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4413      	add	r3, r2
 8002fa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1ad2      	subs	r2, r2, r3
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d920      	bls.n	8002ffc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <pvPortMalloc+0xfc>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	613b      	str	r3, [r7, #16]
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad2      	subs	r2, r2, r3
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ff6:	69b8      	ldr	r0, [r7, #24]
 8002ff8:	f000 f90a 	bl	8003210 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <pvPortMalloc+0x18c>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	4a1b      	ldr	r2, [pc, #108]	@ (8003074 <pvPortMalloc+0x18c>)
 8003008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800300a:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <pvPortMalloc+0x18c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b1b      	ldr	r3, [pc, #108]	@ (800307c <pvPortMalloc+0x194>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d203      	bcs.n	800301e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003016:	4b17      	ldr	r3, [pc, #92]	@ (8003074 <pvPortMalloc+0x18c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a18      	ldr	r2, [pc, #96]	@ (800307c <pvPortMalloc+0x194>)
 800301c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <pvPortMalloc+0x188>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	431a      	orrs	r2, r3
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003032:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <pvPortMalloc+0x198>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	4a11      	ldr	r2, [pc, #68]	@ (8003080 <pvPortMalloc+0x198>)
 800303a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800303c:	f7ff fa46 	bl	80024cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <pvPortMalloc+0x17a>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	60fb      	str	r3, [r7, #12]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <pvPortMalloc+0x176>
	return pvReturn;
 8003062:	69fb      	ldr	r3, [r7, #28]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3728      	adds	r7, #40	@ 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200040b8 	.word	0x200040b8
 8003070:	200040cc 	.word	0x200040cc
 8003074:	200040bc 	.word	0x200040bc
 8003078:	200040b0 	.word	0x200040b0
 800307c:	200040c0 	.word	0x200040c0
 8003080:	200040c4 	.word	0x200040c4

08003084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d04f      	beq.n	8003136 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003096:	2308      	movs	r3, #8
 8003098:	425b      	negs	r3, r3
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4b25      	ldr	r3, [pc, #148]	@ (8003140 <vPortFree+0xbc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10b      	bne.n	80030ca <vPortFree+0x46>
	__asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	60fb      	str	r3, [r7, #12]
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	e7fd      	b.n	80030c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <vPortFree+0x66>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	60bb      	str	r3, [r7, #8]
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	e7fd      	b.n	80030e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <vPortFree+0xbc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01e      	beq.n	8003136 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d11a      	bne.n	8003136 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	4b0e      	ldr	r3, [pc, #56]	@ (8003140 <vPortFree+0xbc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003110:	f7ff f9ce 	bl	80024b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <vPortFree+0xc0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4413      	add	r3, r2
 800311e:	4a09      	ldr	r2, [pc, #36]	@ (8003144 <vPortFree+0xc0>)
 8003120:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003122:	6938      	ldr	r0, [r7, #16]
 8003124:	f000 f874 	bl	8003210 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003128:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <vPortFree+0xc4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	4a06      	ldr	r2, [pc, #24]	@ (8003148 <vPortFree+0xc4>)
 8003130:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003132:	f7ff f9cb 	bl	80024cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200040cc 	.word	0x200040cc
 8003144:	200040bc 	.word	0x200040bc
 8003148:	200040c8 	.word	0x200040c8

0800314c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003152:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003156:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003158:	4b27      	ldr	r3, [pc, #156]	@ (80031f8 <prvHeapInit+0xac>)
 800315a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3307      	adds	r3, #7
 800316a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0307 	bic.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	4a1f      	ldr	r2, [pc, #124]	@ (80031f8 <prvHeapInit+0xac>)
 800317c:	4413      	add	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003184:	4a1d      	ldr	r2, [pc, #116]	@ (80031fc <prvHeapInit+0xb0>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800318a:	4b1c      	ldr	r3, [pc, #112]	@ (80031fc <prvHeapInit+0xb0>)
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4413      	add	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003198:	2208      	movs	r2, #8
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <prvHeapInit+0xb4>)
 80031ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <prvHeapInit+0xb4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031b6:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <prvHeapInit+0xb4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	1ad2      	subs	r2, r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <prvHeapInit+0xb4>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <prvHeapInit+0xb8>)
 80031da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <prvHeapInit+0xbc>)
 80031e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <prvHeapInit+0xc0>)
 80031e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80031ea:	601a      	str	r2, [r3, #0]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	200004b0 	.word	0x200004b0
 80031fc:	200040b0 	.word	0x200040b0
 8003200:	200040b8 	.word	0x200040b8
 8003204:	200040c0 	.word	0x200040c0
 8003208:	200040bc 	.word	0x200040bc
 800320c:	200040cc 	.word	0x200040cc

08003210 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003218:	4b28      	ldr	r3, [pc, #160]	@ (80032bc <prvInsertBlockIntoFreeList+0xac>)
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e002      	b.n	8003224 <prvInsertBlockIntoFreeList+0x14>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d8f7      	bhi.n	800321e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	4413      	add	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d108      	bne.n	8003252 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	441a      	add	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d118      	bne.n	8003298 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <prvInsertBlockIntoFreeList+0xb0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d00d      	beq.n	800328e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e008      	b.n	80032a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <prvInsertBlockIntoFreeList+0xb0>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e003      	b.n	80032a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d002      	beq.n	80032ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	200040b0 	.word	0x200040b0
 80032c0:	200040b8 	.word	0x200040b8

080032c4 <memset>:
 80032c4:	4402      	add	r2, r0
 80032c6:	4603      	mov	r3, r0
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	f803 1b01 	strb.w	r1, [r3], #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <_reclaim_reent>:
 80032d4:	4b29      	ldr	r3, [pc, #164]	@ (800337c <_reclaim_reent+0xa8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4283      	cmp	r3, r0
 80032da:	b570      	push	{r4, r5, r6, lr}
 80032dc:	4604      	mov	r4, r0
 80032de:	d04b      	beq.n	8003378 <_reclaim_reent+0xa4>
 80032e0:	69c3      	ldr	r3, [r0, #28]
 80032e2:	b1ab      	cbz	r3, 8003310 <_reclaim_reent+0x3c>
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	b16b      	cbz	r3, 8003304 <_reclaim_reent+0x30>
 80032e8:	2500      	movs	r5, #0
 80032ea:	69e3      	ldr	r3, [r4, #28]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	5959      	ldr	r1, [r3, r5]
 80032f0:	2900      	cmp	r1, #0
 80032f2:	d13b      	bne.n	800336c <_reclaim_reent+0x98>
 80032f4:	3504      	adds	r5, #4
 80032f6:	2d80      	cmp	r5, #128	@ 0x80
 80032f8:	d1f7      	bne.n	80032ea <_reclaim_reent+0x16>
 80032fa:	69e3      	ldr	r3, [r4, #28]
 80032fc:	4620      	mov	r0, r4
 80032fe:	68d9      	ldr	r1, [r3, #12]
 8003300:	f000 f864 	bl	80033cc <_free_r>
 8003304:	69e3      	ldr	r3, [r4, #28]
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	b111      	cbz	r1, 8003310 <_reclaim_reent+0x3c>
 800330a:	4620      	mov	r0, r4
 800330c:	f000 f85e 	bl	80033cc <_free_r>
 8003310:	6961      	ldr	r1, [r4, #20]
 8003312:	b111      	cbz	r1, 800331a <_reclaim_reent+0x46>
 8003314:	4620      	mov	r0, r4
 8003316:	f000 f859 	bl	80033cc <_free_r>
 800331a:	69e1      	ldr	r1, [r4, #28]
 800331c:	b111      	cbz	r1, 8003324 <_reclaim_reent+0x50>
 800331e:	4620      	mov	r0, r4
 8003320:	f000 f854 	bl	80033cc <_free_r>
 8003324:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003326:	b111      	cbz	r1, 800332e <_reclaim_reent+0x5a>
 8003328:	4620      	mov	r0, r4
 800332a:	f000 f84f 	bl	80033cc <_free_r>
 800332e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003330:	b111      	cbz	r1, 8003338 <_reclaim_reent+0x64>
 8003332:	4620      	mov	r0, r4
 8003334:	f000 f84a 	bl	80033cc <_free_r>
 8003338:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800333a:	b111      	cbz	r1, 8003342 <_reclaim_reent+0x6e>
 800333c:	4620      	mov	r0, r4
 800333e:	f000 f845 	bl	80033cc <_free_r>
 8003342:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003344:	b111      	cbz	r1, 800334c <_reclaim_reent+0x78>
 8003346:	4620      	mov	r0, r4
 8003348:	f000 f840 	bl	80033cc <_free_r>
 800334c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800334e:	b111      	cbz	r1, 8003356 <_reclaim_reent+0x82>
 8003350:	4620      	mov	r0, r4
 8003352:	f000 f83b 	bl	80033cc <_free_r>
 8003356:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003358:	b111      	cbz	r1, 8003360 <_reclaim_reent+0x8c>
 800335a:	4620      	mov	r0, r4
 800335c:	f000 f836 	bl	80033cc <_free_r>
 8003360:	6a23      	ldr	r3, [r4, #32]
 8003362:	b14b      	cbz	r3, 8003378 <_reclaim_reent+0xa4>
 8003364:	4620      	mov	r0, r4
 8003366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800336a:	4718      	bx	r3
 800336c:	680e      	ldr	r6, [r1, #0]
 800336e:	4620      	mov	r0, r4
 8003370:	f000 f82c 	bl	80033cc <_free_r>
 8003374:	4631      	mov	r1, r6
 8003376:	e7bb      	b.n	80032f0 <_reclaim_reent+0x1c>
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	bf00      	nop
 800337c:	20000014 	.word	0x20000014

08003380 <__libc_init_array>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	4d0d      	ldr	r5, [pc, #52]	@ (80033b8 <__libc_init_array+0x38>)
 8003384:	4c0d      	ldr	r4, [pc, #52]	@ (80033bc <__libc_init_array+0x3c>)
 8003386:	1b64      	subs	r4, r4, r5
 8003388:	10a4      	asrs	r4, r4, #2
 800338a:	2600      	movs	r6, #0
 800338c:	42a6      	cmp	r6, r4
 800338e:	d109      	bne.n	80033a4 <__libc_init_array+0x24>
 8003390:	4d0b      	ldr	r5, [pc, #44]	@ (80033c0 <__libc_init_array+0x40>)
 8003392:	4c0c      	ldr	r4, [pc, #48]	@ (80033c4 <__libc_init_array+0x44>)
 8003394:	f000 f870 	bl	8003478 <_init>
 8003398:	1b64      	subs	r4, r4, r5
 800339a:	10a4      	asrs	r4, r4, #2
 800339c:	2600      	movs	r6, #0
 800339e:	42a6      	cmp	r6, r4
 80033a0:	d105      	bne.n	80033ae <__libc_init_array+0x2e>
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a8:	4798      	blx	r3
 80033aa:	3601      	adds	r6, #1
 80033ac:	e7ee      	b.n	800338c <__libc_init_array+0xc>
 80033ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b2:	4798      	blx	r3
 80033b4:	3601      	adds	r6, #1
 80033b6:	e7f2      	b.n	800339e <__libc_init_array+0x1e>
 80033b8:	08003560 	.word	0x08003560
 80033bc:	08003560 	.word	0x08003560
 80033c0:	08003560 	.word	0x08003560
 80033c4:	08003564 	.word	0x08003564

080033c8 <__retarget_lock_acquire_recursive>:
 80033c8:	4770      	bx	lr

080033ca <__retarget_lock_release_recursive>:
 80033ca:	4770      	bx	lr

080033cc <_free_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4605      	mov	r5, r0
 80033d0:	2900      	cmp	r1, #0
 80033d2:	d041      	beq.n	8003458 <_free_r+0x8c>
 80033d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d8:	1f0c      	subs	r4, r1, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bfb8      	it	lt
 80033de:	18e4      	addlt	r4, r4, r3
 80033e0:	f000 f83e 	bl	8003460 <__malloc_lock>
 80033e4:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <_free_r+0x90>)
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	b933      	cbnz	r3, 80033f8 <_free_r+0x2c>
 80033ea:	6063      	str	r3, [r4, #4]
 80033ec:	6014      	str	r4, [r2, #0]
 80033ee:	4628      	mov	r0, r5
 80033f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033f4:	f000 b83a 	b.w	800346c <__malloc_unlock>
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	d908      	bls.n	800340e <_free_r+0x42>
 80033fc:	6820      	ldr	r0, [r4, #0]
 80033fe:	1821      	adds	r1, r4, r0
 8003400:	428b      	cmp	r3, r1
 8003402:	bf01      	itttt	eq
 8003404:	6819      	ldreq	r1, [r3, #0]
 8003406:	685b      	ldreq	r3, [r3, #4]
 8003408:	1809      	addeq	r1, r1, r0
 800340a:	6021      	streq	r1, [r4, #0]
 800340c:	e7ed      	b.n	80033ea <_free_r+0x1e>
 800340e:	461a      	mov	r2, r3
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	b10b      	cbz	r3, 8003418 <_free_r+0x4c>
 8003414:	42a3      	cmp	r3, r4
 8003416:	d9fa      	bls.n	800340e <_free_r+0x42>
 8003418:	6811      	ldr	r1, [r2, #0]
 800341a:	1850      	adds	r0, r2, r1
 800341c:	42a0      	cmp	r0, r4
 800341e:	d10b      	bne.n	8003438 <_free_r+0x6c>
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	4401      	add	r1, r0
 8003424:	1850      	adds	r0, r2, r1
 8003426:	4283      	cmp	r3, r0
 8003428:	6011      	str	r1, [r2, #0]
 800342a:	d1e0      	bne.n	80033ee <_free_r+0x22>
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	6053      	str	r3, [r2, #4]
 8003432:	4408      	add	r0, r1
 8003434:	6010      	str	r0, [r2, #0]
 8003436:	e7da      	b.n	80033ee <_free_r+0x22>
 8003438:	d902      	bls.n	8003440 <_free_r+0x74>
 800343a:	230c      	movs	r3, #12
 800343c:	602b      	str	r3, [r5, #0]
 800343e:	e7d6      	b.n	80033ee <_free_r+0x22>
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	1821      	adds	r1, r4, r0
 8003444:	428b      	cmp	r3, r1
 8003446:	bf04      	itt	eq
 8003448:	6819      	ldreq	r1, [r3, #0]
 800344a:	685b      	ldreq	r3, [r3, #4]
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	bf04      	itt	eq
 8003450:	1809      	addeq	r1, r1, r0
 8003452:	6021      	streq	r1, [r4, #0]
 8003454:	6054      	str	r4, [r2, #4]
 8003456:	e7ca      	b.n	80033ee <_free_r+0x22>
 8003458:	bd38      	pop	{r3, r4, r5, pc}
 800345a:	bf00      	nop
 800345c:	2000420c 	.word	0x2000420c

08003460 <__malloc_lock>:
 8003460:	4801      	ldr	r0, [pc, #4]	@ (8003468 <__malloc_lock+0x8>)
 8003462:	f7ff bfb1 	b.w	80033c8 <__retarget_lock_acquire_recursive>
 8003466:	bf00      	nop
 8003468:	20004208 	.word	0x20004208

0800346c <__malloc_unlock>:
 800346c:	4801      	ldr	r0, [pc, #4]	@ (8003474 <__malloc_unlock+0x8>)
 800346e:	f7ff bfac 	b.w	80033ca <__retarget_lock_release_recursive>
 8003472:	bf00      	nop
 8003474:	20004208 	.word	0x20004208

08003478 <_init>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr

08003484 <_fini>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr
